12) a_
#!/bin/bash

echo "Ingrese un numero"
read num1
echo "Ingrese un segundo numero"
read num2

echo "La multiplicacion es `expr $num1 \* $num2`"

echo "La suma es `expr $num1 + $num2`"

echo "La resta es `expr $num1 - $num2`"

if [ $num1 -gt $num2 ]; then
	echo "El mayor es $num1"
elif [ $num1 -lt $num2 ]; then
       echo "El mayor es $num2"
else
 echo "Son iguales"
fi

b_ 
#!/bin/bash

if [ $# -ne 2 ]; then
    	echo "Error: la cantidad de parametros no es 2."
	    exit 1
fi

echo "La multiplicacion es `expr $1 \* $2`"

echo "La suma es `expr $1 + $2`"

echo "La resta es `expr $1 - $2`"

if [ $1 -gt $2 ]; then
	echo "El mayor es $1"
elif [ $1 -lt $2 ]; then
   		echo "El mayor es $2"
else
	echo "Son iguales"
fi

c_ 
#!/bin/bash

if [ $# -ne 3 ]; then
    echo "Numero de parametros insuficientes"
    exit 1
fi

num1=$1
operacion=$2
num2=$3

case $operacion in
	+)
		echo "El resultado de la suma es expr $num1 + $num2"
	;;
    -)
		echo "El resultado de la resta es expr $num1 - $num2"
	;;
	%)
		echo "El resultado de la division es expr $num1 % $num2"
	;;
	*)
		echo "El resultado de la multiplicacion es expr $num1 \* $num2"
	;;
esac


13) a_ 
#!/bin/bash

for i in {1..100}; do

	cuadrado=$(expr $i \* $i)

	echo "Numero: $i Cuadradopeno: $cuadrado"
done

b_ 
#!/bin/bash

echo "Elija una opcion:
	Listar,
	DondeEstoy o
	QuienEsta"
read option
case $option in
	"Listar")
		echo "Contenido del directorio actual:"
		ls
	;;
	"DondeEstoy")
		echo "Directorio actual:"
		pwd
	;;
	"QuienEsta")
		echo "Usuario conectados al sistemas:"
		who
	;;
	*)
		echo "Opciono no valida"
	;;
esac

c_ 
#!/bin/bash

if [ $# -ne 1 ]; then
	echo "Error: se requiere 1 parametro"
	exit 1
fi

nombre=$1

if [ -e "$nombre" ]; then
	if [ -f "$nombre" ]; then
		echo "'$nombre' es un archivo."
	elif [ -d "$nombre" ]; then
		echo "'$nombre' es un directorio."
	fi
else
	echo "'$nombre' no existe. Se creara un directorio con ese nombre."
	mkdir "$nombre"
	echo "Directorio '$nombre' creado."
fi

14)
#!/bin/bash

# Verificamos la cantidad de parametros
if [ $# -ne 3 ]; then
	echo "La cantidad de parametros no es 3."
	exit 1
fi

# Asignamos los parametros a variables
directorio=$1
opcion=$2
cadena=$3

# Verificamos que el directorio pasado como parametro exista
if [ ! -d "$directorio" ]; then
	echo "Error. El directorio no existe."
	exit 1
fi

for archivo in "$directorio"/*
do
	if [ -f $archivo ]
	then
		nombreArchivo=$(basename "$archivo")

		case $opcion in
			"-a")
				nuevoNombre="${nombreArchivo}${cadena}"
				;;
			"-b")
				nuevoNombre="${cadena}${nombreArchivo}"
				;;
			*)
				echo "Error. Opcion no valida. Usa -a o -b."
				exit 1
				;;
		esac]

		# Renombra el archivo
		mv -v "$archivo" "$directorio/$nuevoNombre"
	fi
done
echo "Operacion completada."

16)
#!/bin/bash

if [ $# -ne 1 ]; then
	echo "La cantidad de parametros no es correcta."
	exit 1
fi

extension=$1

# Crea o limpia el archivo reporte.txt
> reporte.txt

# Recorre cada usuario en /home (asumimos que los usuarios tienen directorios en / home)
for user in /home/*; do
	if [ -d "$user" ]; then
		# Extraemos el nombre de usuario (ultima parte del path)
		usuario=$(basename "$user")

		# Cuenta la cantidad de archivos con la extension pasada como parametro
		cantidad=$(find "$user" -type f -name "*.$extension" 2>/dev/null | wc -l)

		echo "$usuario $cantidad" >> reporte.txt
	fi
done

echo "Reporte generado en 'reporte.txt'."

17)
#!/bin/bash

echo "Ejercicio 17"

# Recorremos cada archivo en el directorio actual
for archivo in *; do
	# Verificamos que sea un archivo
	if [ -f "$archivo" ]; then
		# Usa el comando tr para:
   		# 1. Intercambiar mayúsculas por minúsculas.
    		# 2. Eliminar la letra 'a' (mayúscula y minúscula).
		nuevo_nombre=$(echo "$archivo" | tr 'a-zA-Z' 'A-Za-z' | tr -d 'aA')

		echo "$nuevo_nombre"
	fi
done

18)
#!/bin/bash 

# Verificamos que se haya pasado 1 parametro.
if [ $# -ne 1 ]; then
	echo "Error. La cantidad de parametros no es correcta."
	exit 1
fi

usuario=$1

# Bucle infinito para verificar si el usuario se ha logueado.
while true; do
	# Comprobar si el usuario esta logueado
	if who | grep -w "$usuario" > /dev/null; then
		echo "Usuario $usuario logueado en el sistema."
		break
	fi

	# Esperar 10 segundos antes de la siguiente verificacion.
	sleep 10
done

La palabra grep proviene de una expresión utilizada en el editor de texto ed en Unix. 
Su significado se deriva de los comandos:
	g/re/p
Donde:
g: Significa "global", es decir, aplicar la acción a todo el texto.
re: Significa "regular expression" (expresión regular), el patrón que estás buscando.
p: Significa "print" (imprimir), para mostrar las líneas coincidentes.
En conjunto, g/re/p significa "buscar globalmente las líneas que coincidan con una expresión regular y mostrarlas".

El símbolo > en Bash se utiliza para redireccionar la salida de un comando a un 
archivo o, en este caso, a /dev/null.

19)
#!/bin/bash

function mostrar_menu() {
	clear
	echo "MENU DE COMANDOS"
	echo "  
	    03. Ejercicio3.
		12. Evaluar expresiones.
		13. Ejercicio 13.
		14. Renombrando archivos.
		16. Ejercicio 16.
		17. Ejercicio 17.
		18. Ejercicio 18.
		00. Salir.
		"
}

while true; do
	mostrar_menu	
	read -p "Ingrese la opcion a ejecutar: " option

	case $option in
		"03")
			echo "Ejecutando ejercicio 3."
			./ejercicio3.sh
			;;
		"12")
			echo "Ejecutando ejercicio de evaluar expresiones."
			./ejercicio12/ejercicio12a.sh
			;;
		"13")
			echo "Ejecutando ejercicio 13a"
			./ejercicio13/ejercicio13a.sh
			;;
		"14")
			echo "Ejecutando ejercicio de renombrando archivos."
			read -p "Ingrese la ruta del directorio a modificar." dir
			read -p "Ingrese -a para agregar al final y -b para el principio." par
			read -p "Ingrese la cadena." cadena
			./ejercicio14.sh $dir $par $cadena
			;;
		00)
			echo "Saliendo del menu."
			exit 0
			;;
		*)
			echo "Error. Opcion no valida."
			;;
	esac
	read -p "Presione enter para continuar..."
done

Incompleto.

20) y 21)
#!/bin/bash

# Creamos el arreglo vacio
array=()

function push() {
	if [ $# -ne 1 ]; then
		echo "Error. La cantidad de parametros no es correcta."
		return 1 # usamos return 1 en vez de exit 1
	fi
	
	# Forma mas facil para agregar atras
	array+=("$1")

	# Otra forma
	#indice=${#array[*]}
	#array[$indice]=$1
	
	
	# array=(${array[*]} $1) otra forma para agregar al final del vector
}

function pop() {
    if [ ${#array[*]} -eq 0 ]; then
        echo "La pila esta vacia"
        return 1
    fi

    # Forma mas facil
    echo "Sacando: ${array[-1]}"
    unset array[-1]

    # Otra forma
    # indice=$(expr ${#array[*]} - 1) 
	# echo ${array[$indice]}
	# unset array[$indice]
	
	# Es buena practica hacer esto
	array=(${array[*]}) # me reacomoda las posiciones del vector
}

function length() {
    echo ${#array[*]}
}

function print() {
    echo "Elementos de la pila ${array[*]}"
}

# Script principal

# Agregar 10 elementos a la pila
for i in {1..10}; do
    read -p "Ingrese un valor para meter a la pila" valor
    push "$valor"
done

22) 
#!/bin/bash 

num=(10 3 5 7 9 3 5 4)

function productoria() {
	cant=${#num[*]}
	if [ $cant -eq 0 ]; then
		echo "El arreglo esta vacio."
		return 1
	fi

	echo "Multiplicando numeros..."
	producto=1
	for elemento in "${num[@]}"; do 
		producto=$((producto * elemento))
	done

	echo "Resultado: $producto"

}

productoria

23)
#!/bin/bash

array=(1 2 3 4 5 6 7 8 9)

impares=0

for elem in "${array[@]}"; do
	if [ $(( $elem % 2)) -eq 0 ]; then
		echo "Numero par: $elem"
	else
	    impares=$(expr $impares + 1)
	    # Esta manera no me anda
		# (( $impares+=1 ))
	fi
done

echo "La cantidad de numeros impares es: $impares"
;

24)
#!/bin/bash

vector1=( 1 80 65 35 2 )
vector2=( 5 98 3 41 8)


long=$(expr ${#vector1[*]} - 1)

for i in $(seq 0 $long); do
	num1=${vector1[$i]}
	num2=${vector2[$i]}
	echo "La suma de los elementos de la posicion $i de los vectores es $(expr $num1 + $num2)"
done

25)
#!/bin/bash

array=()

if [ $# -eq 0 ]; then
	echo "Error. No ingreso parametros. Usa -b n, -l o -i."
	exit 1
fi

for user in $(cat /etc/group | grep users | cut -d ':' -f 4); do
    array+=($user)
done

case $1 in
	"-b")	
		long=${#array[*]}
		if [ $# -ne 2 ] || [ $2 -lt 0 ] || [ $2 -ge $long ]; then
			echo "Error. Posicion del arreglo incorrecta."
			exit 1
		fi
		echo "Elemento del arreglo en la posicion $2: ${array[$2]}"
	;;
	"-l")
		echo "La longitud del arreglo es: ${#array[*]}"
		;;
	"-i")
		echo "Los elementos del arreglo son: ${array[@]}"
		;;
	*)
		echo "Error. Parametro invalido."
		exit 1
		;;
esac

26)